
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Contribute &mdash; Doctrine-Project</title>
    <link rel="stylesheet" href="_static/bootstrap/css/bootstrap.min.css" type="text/css" />
    <link rel="stylesheet" href="_static/default.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="_static/layout.css" type="text/css" />
    <link rel="stylesheet" href="_static/configurationblock.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '',
        VERSION:     '1.0',
        COLLAPSE_MODINDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>

    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/configurationblock.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/configurationblock.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <script type="text/javascript" src="_static/configurationblock.js"></script>
    <script src="_static/bootstrap/js/bootstrap.min.js"></script>

    <script type="text/javascript">
    <!--
        $(document).ready(function() {
            $("#versions").change(function() {
                var docsUrl = $(this).val();
                window.location.href = docsUrl;
            });
        });
    -->
    </script>
    <link rel="shortcut icon" href="_static/doctrine.ico"/>
    <link rel="author" title="About these documents" href="about.html" />
    <link rel="top" title="Doctrine-Project" href="index.html" /> 
  </head>
  <body>
    <div id="wrapper">
      <div id="header">
        <h1 id="h1title"></h1>
        <div id="logo">
          <a href="http://www.doctrine-project.org/">Doctrine - PHP Database Libraries</a>
        </div>
      </div>
      <div id="nav" class="cls">
        <div class="tl cls">
          <ul>
            <li><a target="_top" href="/">home</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/about">about</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/projects.html">projects</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/projects/orm">orm</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/projects/dbal">dbal</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/blog">blog</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/jira">development</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/contribute">contribute</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/community">community</a></li>
          </ul>
        </div>
      </div>
      <div id="content" class="cls">
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li><a href="/">Doctrine Homepage</a> &raquo;</li>
        <li><a href="index.html">Homepage</a> &raquo;</li> 
      </ul>
    </div>  

        <div class="document">
            <div class="documentwrapper">

              <div class="body" style="margin: auto;">
                
  <div class="section" id="contribute">
<h1>Contribute<a class="headerlink" href="#contribute" title="Permalink to this headline">¶</a></h1>
<p>Welcome to the Doctrine Project Contributors Guide. This
documentation aims to document how contributors and collaborators
should work when using git, development workflow, build process,
dependency management, etc.</p>
<div class="section" id="about">
<h2>About<a class="headerlink" href="#about" title="Permalink to this headline">¶</a></h2>
<p>The Doctrine Project is the home of a selected set of PHP libraries
primarily focused on providing persistence services and related
functionality. Its prize projects are a Object Relational Mapper
and the Database Abstraction Layer it is built on top of. You can
view a list of all
<a class="reference external" href="http://www.doctrine-project.org/projects">projects</a> on the
website.</p>
</div>
<div class="section" id="contributors-vs-collaborators">
<h2>Contributors vs Collaborators<a class="headerlink" href="#contributors-vs-collaborators" title="Permalink to this headline">¶</a></h2>
<p>Before continuing you need to understand the difference between a
contributor and a collaborator.</p>
<ul class="simple">
<li>Contributor: A contributor is someone from the outside not on
the core development team of the project that wants to contribute
some changes to a project.</li>
<li>Collaborator: A collaborator is someone on the core development
team of the project and has commit access to the main repository of
the project.</li>
</ul>
<p>Continue reading to learn about the workflow for both contributors
and collaborators.</p>
</div>
</div>
<div class="section" id="contributor-workflow">
<h1>Contributor Workflow<a class="headerlink" href="#contributor-workflow" title="Permalink to this headline">¶</a></h1>
<div class="section" id="who-is-a-contributor">
<h2>Who is a contributor?<a class="headerlink" href="#who-is-a-contributor" title="Permalink to this headline">¶</a></h2>
<p>A contributor can be anyone! It could be you. Continue reading this
section if you wish to get involved and contribute back to a
Doctrine project.</p>
</div>
<div class="section" id="initial-setup">
<h2>Initial Setup<a class="headerlink" href="#initial-setup" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Setup a <a class="reference external" href="http://github.com">github</a> account.</li>
<li>Fork the <a class="reference external" href="http://github.com/doctrine/doctrine2">repository</a> of
the project you want to contribute to.</li>
<li>Clone your fork locally</li>
<li></li>
</ul>
<div class="highlight-python"><pre>$ git clone git@github.com:username/doctrine2.git</pre>
</div>
<ul class="simple">
<li>Enter the doctrine2 directory and add the <strong>doctrine</strong> remote</li>
<li></li>
</ul>
<div class="highlight-python"><pre>$ cd doctrine2
$ git remote add doctrine git://github.com/doctrine/doctrine2.git</pre>
</div>
<ul class="simple">
<li>Adjust your branch to track the doctrine master remote branch,
by default it&#8217;ll track your origin remote&#8217;s master:</li>
<li></li>
</ul>
<div class="highlight-python"><pre>$ git config branch.master.remote doctrine</pre>
</div>
</div>
<div class="section" id="keeping-your-master-up-to-date">
<h2>Keeping your master up-to-date!<a class="headerlink" href="#keeping-your-master-up-to-date" title="Permalink to this headline">¶</a></h2>
<p>Once all this is done, you&#8217;ll be able to keep your local master up
to date with the simple command:</p>
<div class="highlight-python"><pre>$ git checkout master
$ git pull --rebase</pre>
</div>
<p>Alternatively, you can synchronize your master from any branch with
the full fetch/rebase syntax:</p>
<div class="highlight-python"><pre>$ git fetch doctrine
$ git rebase doctrine/master master</pre>
</div>
<p>Using rebase pull will do a rebase instead of a merge, which will
keep a linear history with no unnecessary merge commits. It&#8217;ll also
rewind, apply and then reapply your commits at the HEAD.</p>
</div>
<div class="section" id="branching-model">
<h2>Branching Model<a class="headerlink" href="#branching-model" title="Permalink to this headline">¶</a></h2>
<p>The following names will be used to differentiate between the
different repositories:</p>
<ul class="simple">
<li><strong>doctrine</strong> - The &#8220;official&#8221; Doctrine repository</li>
<li><strong>origin</strong> - Your fork of the official repository on github</li>
<li><strong>local</strong> - This will be your local clone of <strong>origin</strong></li>
</ul>
<p>As a <strong>contributor</strong> you will push your completed <strong>local</strong> topic
branch to <strong>origin</strong>. As a <strong>contributor</strong> you will pull updates
from <strong>doctrine</strong>. As a <strong>collaborator</strong> (write-access) you will
merge branches from contributors into <strong>doctrine</strong>.</p>
</div>
<div class="section" id="primary-branches">
<h2>Primary Branches<a class="headerlink" href="#primary-branches" title="Permalink to this headline">¶</a></h2>
<p>The <strong>doctrine</strong> repository holds the following primary branches:</p>
<ul class="simple">
<li><strong>doctrine/master</strong> Development towards the next release.</li>
<li><strong>doctrine/release-*</strong> Maintenance branches of existing
releases.</li>
</ul>
<p>These branches exist in parallel and are defined as follows:</p>
<p><strong>doctrine/master</strong> is the branch where the source code of <strong>HEAD</strong>
always reflects the latest version. Each released stable version
will be a tagged commit in a <strong>doctrine/release-*</strong> branch. Each
released unstable version will be a tagged commit in the
<strong>doctrine/master</strong> branch.</p>
<blockquote>
<div><strong>NOTE</strong> You should never commit to your forked <strong>origin/master</strong>.
Changes to <strong>origin/master</strong> will never be merged into
<strong>doctrine/master</strong>. All work must be done in a <strong>topic branch</strong>,
which are explained below.</div></blockquote>
</div>
<div class="section" id="topic-branches">
<h2>Topic Branches<a class="headerlink" href="#topic-branches" title="Permalink to this headline">¶</a></h2>
<p>Topic branches are for contributors to develop bug fixes, new
features, etc. so that they can be easily merged to <strong>master</strong>.
They must follow a few simple rules as listed below:</p>
<ul class="simple">
<li>May branch off from: <strong>master</strong> or a <strong>release-*</strong> branch.</li>
<li>Must merge back into: <strong>master</strong> and any affected <strong>release-*</strong>
branch that should get the same changes, but remember that release
branches usually only get bug fixes, with rare exceptions.</li>
<li>Branch naming convention: anything except <strong>master</strong> and
<strong>release-*</strong>. If a topic is related to a JIRA issue then the
branch should be named after that ticket, e.g. <strong>DDC-588</strong></li>
</ul>
<p>Topic branches are used to develop new features and fix reported
issues. When starting development of a feature, the target release
in which this feature will be incorporated may well be unknown. The
essence of a topic branch is that it exists as long as the feature
is in development, but will eventually be merged back into
<strong>master</strong> or a <strong>release-*</strong> branch (to add the new feature or
bugfix to a next release) or discarded (in case of a disappointing
experiment).</p>
<p>Topic branches should exist in your <strong>local</strong> and <strong>origin</strong>
repositories only, there is no need for them to exist in
<strong>doctrine</strong>.</p>
</div>
<div class="section" id="working-on-topic-branches">
<h2>Working on topic branches<a class="headerlink" href="#working-on-topic-branches" title="Permalink to this headline">¶</a></h2>
<p>First create an appropriately named branch. When starting work on a
new topic, branch off from <strong>doctrine/master</strong> or a
<strong>doctrine/release-*</strong> branch:</p>
<div class="highlight-python"><pre>$ git checkout -b DDC-588 doctrine/master
Switched to a new branch "DDC-588"</pre>
</div>
<p>Now do some work, make some changes then commit them:</p>
<div class="highlight-python"><pre>$ git status
$ git commit &lt;filespec&gt;</pre>
</div>
<p>Next, merge or rebase your commit against <strong>doctrine/master</strong>. With
your work done in a <strong>local</strong> topic branch, you&#8217;ll want to assist
upstream merge by rebasing your commits. You can either do this
manually with <tt class="docutils literal"><span class="pre">fetch</span></tt> then <tt class="docutils literal"><span class="pre">rebase</span></tt>, or use the
<tt class="docutils literal"><span class="pre">pull</span> <span class="pre">--rebase</span></tt> shortcut. You may encounter merge conflicts,
which you should fix and then mark as fixed with <tt class="docutils literal"><span class="pre">add</span></tt>, and then
continue rebasing with <tt class="docutils literal"><span class="pre">rebase</span> <span class="pre">--continue</span></tt>. At any stage, you can
abort the rebase with <tt class="docutils literal"><span class="pre">rebase</span> <span class="pre">--abort</span></tt> unlike nasty merges which
will leave files strewn everywhere.</p>
<blockquote>
<div><strong>CAUTION</strong> Please note that once you have pushed your branch
remotely you MUST NOT rebase!</div></blockquote>
<div class="highlight-python"><pre>$ git fetch doctrine
$ git rebase doctrine/master DDC-588</pre>
</div>
<p>or (uses tracking branch shortcuts):</p>
<div class="highlight-python"><pre>$ git pull --rebase

**CAUTION** You must not rebase if you have pushed your branch to
**origin**.</pre>
</div>
<p>If you need to pull master into your branch after it has already
been pushed remotely, simply use:</p>
<div class="highlight-python"><pre>$ git pull</pre>
</div>
<p>Push your branch to <strong>origin</strong>:</p>
<p>Finished topic branches should be pushed to <strong>origin</strong> for a
<strong>collaborator</strong> to review and pull into <strong>doctrine</strong> as
appropriate:</p>
<div class="highlight-python"><pre>$ git push origin DDC-588
To git@github.com:hobodave/doctrine2.git
    * [new branch]      DDC-588 -&gt; DDC-588&lt;/pre&gt;</pre>
</div>
<p>Now you are read to send a pull request from this branch, and
update JIRA, to let a collaborator know your branch can be merged.</p>
</div>
<div class="section" id="topic-branch-cleanup">
<h2>Topic Branch Cleanup<a class="headerlink" href="#topic-branch-cleanup" title="Permalink to this headline">¶</a></h2>
<p>Once your work has been merged by the branch maintainer, it will no
longer be necessary to keep the local branch or remote branch, so
you can remove them!</p>
<p>Sync your local master:</p>
<div class="highlight-python"><pre>$ git checkout master
$ git pull --rebase</pre>
</div>
<p>Remove your local branch using -d to ensure that it has been merged
by upstream. Branch -d will not delete a branch that is not an
ancestor of your current head.</p>
<p>From the git-branch man page:</p>
<pre>
-d
    Delete a branch. The branch must be fully merged in HEAD.
-D
    Delete a branch irrespective of its merged status.
</pre><p>Remove your local branch:</p>
<div class="highlight-python"><pre>$ git branch -d DDC-588</pre>
</div>
<p>Remove your remote branch at <strong>origin</strong>:</p>
<div class="highlight-python"><pre>$ git push origin :DDC-588</pre>
</div>
<p>The projects under the Doctrine umbrella use
<a class="reference external" href="http://phing.info/trac">Phing</a> to automate the process for
building our distributable PEAR packages.</p>
</div>
</div>
<div class="section" id="collaborator-workflow">
<h1>Collaborator Workflow<a class="headerlink" href="#collaborator-workflow" title="Permalink to this headline">¶</a></h1>
<div class="section" id="who-is-a-collaborator">
<h2>Who is a collaborator?<a class="headerlink" href="#who-is-a-collaborator" title="Permalink to this headline">¶</a></h2>
<p>Collaborators are those who have been granted write access to the
main repository of a project. In the example of the ORM, it would
be this <a class="reference external" href="http://github.com/doctrine/doctrine2">repository</a>. This
repository will be referred to as <strong>doctrine</strong> in this document.</p>
<p>You might want want to know how a collaborator is different from a
contributor. The <strong>Collaborator Workflow</strong> is used primarily for
the following:</p>
<ul class="simple">
<li>Merging <strong>contributor</strong> branches into <strong>doctrine/master</strong> and/or
<strong>doctrine/release-*</strong> branches.</li>
<li>Creating &#64;release-*&#64; branches.</li>
<li>Tagging released versions within <strong>master</strong> and <strong>release-*</strong>
branches.</li>
</ul>
</div>
<div class="section" id="setup">
<h2>Setup<a class="headerlink" href="#setup" title="Permalink to this headline">¶</a></h2>
<p>First you must Fork the
<a class="reference external" href="http://github.com/doctrine/doctrine2">repository</a> and clone your
fork locally:</p>
<div class="highlight-python"><pre>$ git clone git@github.com:username/doctrine2.git doctrine2-orm
$ cd doctrine2-orm</pre>
</div>
<p>Fetch dependencies using git submodules:</p>
<div class="highlight-python"><pre>$ git submodule init
$ git submodule update</pre>
</div>
<p>Now add the <strong>doctrine</strong> remote for collaborators:</p>
<div class="highlight-python"><pre>$ cd doctrine2
$ git remote add doctrine git@github.com:doctrine/doctrine2.git</pre>
</div>
<p>Adjust your branch to track the doctrine master remote branch, by
default it&#8217;ll track your origin remote&#8217;s master:</p>
<div class="highlight-python"><pre>$ git config branch.master.remote doctrine</pre>
</div>
<p>Optionally, add any additional contributor/collaborator forks,
e.g.:</p>
<div class="highlight-python"><pre>$ git remote add romanb git://github.com/romanb/doctrine2.git</pre>
</div>
</div>
<div class="section" id="id3">
<h2>Branching Model<a class="headerlink" href="#id3" title="Permalink to this headline">¶</a></h2>
<div class="section" id="merging-topic-branches">
<h3>Merging topic branches<a class="headerlink" href="#merging-topic-branches" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Topic branches <strong>must</strong> merge into <strong>master</strong> and/or any
affected <strong>release-*</strong> branches.</li>
<li>Merging a topic branch puts it into the <em>next</em> release, that is
the next release created from <strong>master</strong> and/or the next patch
release created from a specific <strong>release-*</strong> branch.</li>
</ul>
<div class="section" id="steps">
<h4>Steps<a class="headerlink" href="#steps" title="Permalink to this headline">¶</a></h4>
<p>Add remote repo for contributor/collaborator, if necessary (only
needs to be done once per collaborator):</p>
<div class="highlight-python"><pre>$ git remote add hobodave git://github.com/hobodave/doctrine2.git</pre>
</div>
<p>Fetch remote:</p>
<div class="highlight-python"><pre>$ git fetch hobodave</pre>
</div>
<p>Merge topic branch into master:</p>
<div class="highlight-python"><pre>$ git checkout master
Switched to branch 'master'
$ git merge --no-ff hobodave/DDC-588
Updating ea1b82a..05e9557
(Summary of changes)
$ git push doctrine master</pre>
</div>
<p>The <strong>&#8211;no-ff</strong> flag causes the merge to always create a new commit
object, even if the merge could be performed with a fast-forward.
This avoids losing information about the historical existence of a
topic branch and groups together all commits that together added
the topic.</p>
</div>
</div>
<div class="section" id="release-branches">
<h3>Release branches<a class="headerlink" href="#release-branches" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>May branch off from: <strong>master</strong></li>
<li>Must merge back into: -</li>
<li>Branch naming convention: <strong>release-*</strong></li>
</ul>
<p>Release branches are created when <strong>master</strong> has reached the state
of the next major or minor release. They allow for continuous bug
fixes and patch releases of that particular release until the
release is no longer supported.</p>
<p>The key moment to branch off a new release branch from <strong>master</strong>
is when <strong>master</strong> reflects the desired state of the new release.</p>
<div class="section" id="creating-a-release-branch">
<h4>Creating a release branch<a class="headerlink" href="#creating-a-release-branch" title="Permalink to this headline">¶</a></h4>
<p>Release branches are created from the <strong>master</strong> branch. When the
state of <strong>master</strong> is ready for the upcoming target version we
branch off and give the release branch a name reflecting the target
version number. In addition the &#8221;.0&#8221; release is tagged on the new
release branch:</p>
<div class="highlight-python"><pre>$ git checkout -b release-2.0 doctrine/master
Switched to a new branch "release-2.0"
$ git push doctrine release-2.0
$ git tag -a 2.0.0
$ git push doctrine release-2.0</pre>
</div>
<p>This new branch may exist for a while, at least until the release
is no longer supported. During that time, bug fixes are applied in
this branch (in addition to the <strong>master</strong> branch), if it is
affected by the same bug. Adding large new features here is
prohibited. They must be merged into <strong>master</strong>, and therefore,
wait for the next major or minor release.</p>
</div>
</div>
</div>
</div>
<div class="section" id="project-dependencies">
<h1>Project Dependencies<a class="headerlink" href="#project-dependencies" title="Permalink to this headline">¶</a></h1>
<p>Project dependencies between Doctrine projects are handled through
git submodules. The code of the particular Doctrine project you
have cloned is located under <strong>lib/Doctrine</strong>. The source code of
dependencies to other projects resides under <strong>lib/vendor</strong>. If you
have a local clone of a Doctrine project that you use directly and
this project has dependencies to other (Doctrine) projects, you
must run the following commands in order for the git submodules to
be loaded:</p>
<div class="highlight-python"><pre>$ git submodule init
$ git submodule update</pre>
</div>
<p>Alternatively, consider using a packaged release from the
<a class="reference external" href="http://www.doctrine-project.org">Doctrine Website</a> that contains
everything you need already.</p>
<div class="section" id="bumping-versions">
<h2>Bumping Versions<a class="headerlink" href="#bumping-versions" title="Permalink to this headline">¶</a></h2>
<p>To bump/upgrade a dependency version you just need to follow a few
simple steps:</p>
<div class="highlight-python"><pre>$ cd lib/vendor/doctrine-dbal
$ git checkout 2.0.0BETA2
$ cd ../../../
$ git commit
$ git push</pre>
</div>
</div>
<div class="section" id="testing-different-versions">
<h2>Testing Different Versions<a class="headerlink" href="#testing-different-versions" title="Permalink to this headline">¶</a></h2>
<p>Testing another version is much the same as bumping the version
except that you must not forget to go back to the old version when
you&#8217;re done otherwise if you git <tt class="docutils literal"><span class="pre">commit</span> <span class="pre">-a</span></tt> you will push the
new version you were testing. Here is an example:</p>
<div class="highlight-python"><pre>$ cd lib/vendor/doctrine-dbal
$ git checkout 2.0.0BETA2
$ cd ../../../</pre>
</div>
<p>Now you can run the tests against the DoctrineDBAL-2.0.0BETA2
version to test that the new version of the dependency doesn&#8217;t
break anything:</p>
<div class="highlight-python"><pre>$ cd tests
$ phpunit Doctrine/Tests/AllTests.php</pre>
</div>
<p>Now don&#8217;t forget to change back the version after testing if you
are not going to bump it permanently and commit it:</p>
<div class="highlight-python"><pre>cd lib/vendor/doctrine-dbal
git checkout 2.0.0-BETA1</pre>
</div>
</div>
<div class="section" id="checking-submodule-tag">
<h2>Checking Submodule Tag<a class="headerlink" href="#checking-submodule-tag" title="Permalink to this headline">¶</a></h2>
<p>If you want to check what tag a submodule is currently at you can
use something like this from the submodule root directory:</p>
<div class="highlight-python"><pre>$ cd lib/vendor/doctrine-dbal</pre>
</div>
<p>To get the status of the submodule:</p>
<div class="highlight-python"><pre>$ git submodule status</pre>
</div>
<p>Then use the SHA that is shown in the following command to show the
name of the tag:</p>
<div class="highlight-python"><pre>$ git show-ref --tags | grep SHA</pre>
</div>
</div>
</div>
<div class="section" id="phing-build-process">
<h1>Phing Build Process<a class="headerlink" href="#phing-build-process" title="Permalink to this headline">¶</a></h1>
<div class="section" id="prerequisites">
<h2>Prerequisites<a class="headerlink" href="#prerequisites" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>You must have PEAR installed.</li>
<li>You must have <a class="reference external" href="http://phing.info/trac">Phing</a> installed. The
easiest way is through
<a class="reference external" href="http://phing.info/docs/guide/stable/chapters/Setup.html#Setup.PearInstall">pear</a>.</li>
<li>You must have the
<a class="reference external" href="http://pear.domain51.com/svn/Phing_d51PearPkg2Task/trunk/src/phing/tasks/ext/d51PearPkg2Task.php">d51PearPkg2Task</a>
added to the core Phing tasks.</li>
<li>Copy the <strong>build.properties.dev</strong> file to <strong>build.properties</strong>
and adjust any properties to your local environment, if necessary.</li>
</ul>
</div>
<div class="section" id="building">
<h2>Building<a class="headerlink" href="#building" title="Permalink to this headline">¶</a></h2>
<p>Clone the Doctrine project that you want to build and from within
the root directory of the project (where the build.xml resides) run
one of the following commands.</p>
<div class="highlight-python"><pre>$ git clone git://github.com/doctrine/doctrine2.git doctrine2-orm
$ cd doctrine2-orm</pre>
</div>
<p>As mentioned previously, Doctrine uses submodules with git to make
sure the required dependencies are present. You can initialize
these dependencies using the following commands:</p>
<div class="highlight-python"><pre>$ git submodule init
$ git submodule update</pre>
</div>
<div class="section" id="basic-build">
<h3>Basic Build<a class="headerlink" href="#basic-build" title="Permalink to this headline">¶</a></h3>
<p>You can simply run <tt class="docutils literal"><span class="pre">phing</span></tt> and it will build the sources that are
packaged for distribution:</p>
<div class="highlight-python"><pre>$ phing</pre>
</div>
<p>After a successful build you will find the prepared code that will
be packaged for distribution in the <strong>build</strong> directory.</p>
</div>
<div class="section" id="distributable-archives">
<h3>Distributable Archives<a class="headerlink" href="#distributable-archives" title="Permalink to this headline">¶</a></h3>
<p>If you want to produce a distributable PEAR archive run:</p>
<div class="highlight-python"><pre>$ phing build-packages</pre>
</div>
<p>After a successful build you will find the distributable archive(s)
in the <strong>dist</strong> directory.</p>
</div>
<div class="section" id="running-tests">
<h3>Running Tests<a class="headerlink" href="#running-tests" title="Permalink to this headline">¶</a></h3>
<p>The tests will be run automatically by most other targets but you
can also run them directly:</p>
<div class="highlight-python"><pre>$ phing test</pre>
</div>
</div>
</div>
</div>


              </div>

            </div>
          <div class="clearer"></div>
        </div>
          <div class="footer">
              &copy; Copyright 2011, Doctrine Project Team.
              Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.0.7.
            <br/>
            <a target="_BLANK" href="http://www.servergrove.com"><img src="http://www.doctrine-project.org/images/servergrove.jpg" /></a>      <br/><br/>
            <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
              <input type="hidden" name="cmd" value="_s-xclick" />
              <input type="hidden" name="hosted_button_id" value="BAE2E3XANQ77Y" />
              <input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" />
              <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
            </form>
          </div>
      </div>

      <div id="bot-rcnr">
        <div class="tl"><!-- corner --></div>
      </div>
    </div>

  <script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
  </script>
  <script type="text/javascript">
  _uacct = "UA-288343-7";
  urchinTracker();
  </script>
  <a class="githublink" href="http://github.com/doctrine"><img src="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png" alt="Fork me on GitHub"></a>
  </body>
</html>